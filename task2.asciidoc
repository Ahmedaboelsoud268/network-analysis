+*In[6]:*+
[source, ipython3]
----
import networkx as nx
----


+*In[7]:*+
[source, ipython3]
----
nx.__version__
----


+*Out[7]:*+
----'2.6.3'----


+*In[158]:*+
[source, ipython3]
----
G = nx.Graph()
G.add_node('a')
nodes_to_add =['b','c','d']
G.add_nodes_from(nodes_to_add)
G.add_edge('a','b')
edges_to_add=[('a','c'), ('b','c'), ('c','d')]
G.add_edges_from(edges_to_add)
nx.draw(G, with_labels=True, node_color='green', node_size=1000,font_color='white', font_size=30)
----


+*Out[158]:*+
----
![png](output_2_0.png)
----


+*In[60]:*+
[source, ipython3]
----
list(G.neighbors('b'))

for neighbor in G.neighbors('a'):
    print(neighbor)
nx.is_tree(G)
----


+*Out[60]:*+
----
b
c
False----


+*In[46]:*+
[source, ipython3]
----
nx.is_connected(G)
----


+*Out[46]:*+
----True----


+*In[49]:*+
[source, ipython3]
----
G.has_node('f')
----


+*Out[49]:*+
----False----


+*In[51]:*+
[source, ipython3]
----
G.has_edge('a','b')
----


+*Out[51]:*+
----True----


+*In[53]:*+
[source, ipython3]
----
G.has_edge('a','d')
----


+*Out[53]:*+
----False----


+*In[59]:*+
[source, ipython3]
----
('a','d') in G.edges
----


+*Out[59]:*+
----False----


+*In[57]:*+
[source, ipython3]
----
('a','c') in G.edges
----


+*Out[57]:*+
----True----


+*In[64]:*+
[source, ipython3]
----
len(list(G.neighbors('c')))
----


+*Out[64]:*+
----3----


+*In[69]:*+
[source, ipython3]
----
G.degree('d')
----


+*Out[69]:*+
----1----


+*In[119]:*+
[source, ipython3]
----
#ex1
a=[]
def get_leaves(x):
    for node in x.nodes:
        if x.degree(node)==1:
            a.append(node)
    return a            
get_leaves(G)
    
----


+*Out[119]:*+
----['d']----


+*In[159]:*+
[source, ipython3]
----
#ex3
l=[]
def mutual_friends(g, node_1, node_2):
    n1=list(g.neighbors(node_1))
    n2=list(g.neighbors(node_2))
    for node1 in n1:
        for node2 in n2:
            if node1==node2:
                l.append(node1)
    return l

mutual_friends(G, 'a', 'b')
----


+*Out[159]:*+
----['c']----


+*In[147]:*+
[source, ipython3]
----
#ex2
l=[]
def max_degree(G):
    d=0
    n=''
    for node in G.nodes:
        if d < G.degree(node):
            d=G.degree(node)
            n=node
    l.append(('name',n))
    l.append(('degree',d))
    return l 
max_degree(G)
----


+*Out[147]:*+
----[('name', 'c'), ('degree', 3)]----


+*In[118]:*+
[source, ipython3]
----
x=['ahmed','a','aboelsoud']
[x.upper() for x in x]
----


+*Out[118]:*+
----['AHMED', 'A', 'ABOELSOUD']----


+*In[100]:*+
[source, ipython3]
----
max(len(x) for x in  x)
----


+*Out[100]:*+
----9----


+*In[102]:*+
[source, ipython3]
----
min(len(x) for x in x)
----


+*Out[102]:*+
----1----


+*In[150]:*+
[source, ipython3]
----
c=nx.Graph()
c.add_nodes_from(['asd','asd1','asd2','asd3'])
c.add_edge('asd2','asd1')
nx.draw(c,with_labels=True, node_color='red',font_size='15', node_size=1000)
----


+*Out[150]:*+
----
![png](output_18_0.png)
----


+*In[153]:*+
[source, ipython3]
----

----


+*Out[153]:*+
----

    ---------------------------------------------------------------------------

    NameError                                 Traceback (most recent call last)

    ~\AppData\Local\Temp/ipykernel_28352/3148399332.py in <module>
          9     return l
         10 
    ---> 11 mutual_friends(G, node_1, node_2)
    

    NameError: name 'node_1' is not defined

----
